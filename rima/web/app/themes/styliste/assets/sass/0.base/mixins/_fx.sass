// ==========================================================================
// MIXINS - FX
// ==========================================================================


// PREFIXED PROPS
// exemple :
// +prefix(transform, translate3d(0,0,0) )
// +prefix(transition, transform 300ms linear, opacity 300ms linear 200ms )

=prefix($prop, $values...)
  $prefixes: -webkit-, -moz-, -ms-, -o-, null
  @for $p from 1 through length($prefixes)
    $results: ()
    @for $i from 1 through length($values)
      $val: nth($values, $i)
      $res: ()
      @for $k from 1 through length($val)
        @if nth($val, $k) == transform
          $res: append($res, #{nth($prefixes, $p)}#{nth($val, $k)}, space)
        @else
          $res: append($res, #{nth($val, $k)}, space)
      $results: append($results, $res, comma)
    #{nth($prefixes, $p)}#{$prop}: $results

// GRADIENT
=gradient($start: #000, $end: #fff, $from: top, $to: bottom)
  background-color: $end
  background-image: -webkit-gradient(linear, #{$from}, #{$to}, from($start), to($end))
  background-image: -webkit-linear-gradient(#{$from}, $start, $end)
  background-image: -moz-linear-gradient(#{$from}, $start, $end)
  background-image: -o-linear-gradient(#{$from}, $start, $end)
  background-image: linear-gradient(to #{$to}, $start, $end)


// OPACITY
=opacity($n)
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$n*100})"
  filter: "alpha(opacity=#{$n*100})"
  opacity: $n


// BORDER RADIUS
// exemple :
// +border-radius(10px)
// +border-radius(50px 10px 50px 10px)
=border-radius($radius...)
  -webkit-border-radius: $radius
  -moz-border-radius: $radius
  border-radius: $radius


// BOX SHADOW
// exemple :
// +box-shadow(0 0 10px 0 rgba(0,0,0,0.2))
// +box-shadow(0 0 10px 0 rgba(0,0,0,0.2), inset 0 0 10px 0 rgba(0,0,0,0.2))
=box-shadow($val...)
  -webkit-box-shadow: $val
  -moz-box-shadow: $val
  box-shadow: $val


// BLACK & WHITE
=bw($n: on)
  @if $n==on
    $n: 100
  @if $n==off
    $n: 0
  $n: strip-unit($n)
  @if $n > 0
    filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale")
    filter: gray
  @else
    filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0\'/></filter></svg>#grayscale")
    filter: none
  -webkit-filter: #{ "grayscale(" + $n + "%)" }
  -moz-filter: #{ "grayscale(" + $n + "%)" }
  -ms-filter: #{ "grayscale(" + $n + "%)" }
  -o-filter: #{ "grayscale(" + $n + "%)" }
  filter: #{ "grayscale(" + $n + "%)" }


// TEXT OUTLINE
// exemple:
// +test-stroke(4px, #444)
=text-stroke($r: 0, $color: #000000, $after: '' ,$treshold: 0)
  @if $r == 0
    text-shadow: none
    filter: none
  @else
    $r: strip-unit($r)
    $i: 0
    $maxs: ()
    $rt: $r + $treshold
    @while $i < $r
      $i: $i + 1
      $maxs: append($maxs, round((sqrt(($rt*$rt) - ($i*$i))+$treshold)*10)/10, comma)
    $i: 0
    $lx: 100
    $ly: 100
    $shadow: #{$r}px 0 0 $color
    $shadow: #{$shadow}, 0 #{$r}px 0 $color
    $shadow: #{$shadow}, -#{$r}px 0 0 $color
    $shadow: #{$shadow}, 0 -#{$r}px 0 $color
    @while $i < $r
      $i: $i + 1
      $x: nth($maxs, $i)
      $y: nth($maxs, ($r - $i + 1))
      @if ($x != $lx) or ($y != $ly)
        $shadow: #{$shadow}, #{$x}px #{$y}px 0 $color
        $shadow: #{$shadow}, -#{$x}px #{$y}px 0 $color
        $shadow: #{$shadow}, #{$x}px -#{$y}px 0 $color
        $shadow: #{$shadow}, -#{$x}px -#{$y}px 0 $color
      $lx: $x
      $ly: $y
    @if $after != ''
      $shadow: #{$shadow}, #{$after}
    text-shadow: $shadow


  // DELAYED TRANSITIONS
  // exemple:
  // .menu
  //   +delayed("&.opened", 10, 100ms, 20ms)
  // ----- donnera -----
  // .menu .delayed-1
  //   transition-delay: 10ms
  // .menu.opened .delayed-1
  //  transition-delay: 100ms

=delayed($active-selector: "&:hover", $quantity: 10, $delay-in: 60ms, $delay-out: 60ms, $ease-in: ease, $ease-out: ease, $offset-in: 0, $offset-out: 0)
  @for $i from 0 through $quantity
    .delay-#{$i}
      .csstransforms.csstransitions &
        +prefix(transition-delay, (($quantity - $i)*$delay-in)+$offset-out)
        +prefix(transition-timing-function, $ease-in)
  #{$active-selector}
    @for $i from 0 through $quantity
      .delay-#{$i}
        .csstransforms.csstransitions &
          +prefix(transition-delay, ($i*$delay-in)+$offset-in)
          +prefix(transition-timing-function, $ease-out)
